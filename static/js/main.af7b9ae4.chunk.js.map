{"version":3,"sources":["firebase.js","Message.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","LeftMessage","createStyledComponent","FlexItem","background","borderRadius","color","lineHeight","marginBottom","marginRight","marginTop","maxWidth","padding","textAlign","width","wordWrap","RightMessage","marginLeft","Message","_ref","message","react_default","a","createElement","Flex_default","justifyContent","name","data-testid","concat","key","text","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentVal","messages","handleChange","bind","assertThisInitialized","handleSubmit","loadMessages","event","setState","target","value","preventDefault","trim","props","saveMessage","_this2","updateMessages","snapshot","data","val","newMessage","push","database","ref","limitToLast","on","messageText","Math","floor","random","catch","error","console","themes","className","map","src_Message","onSubmit","onChange","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af7b9ae4.chunk.js","sourcesContent":["import * as firebase from \"firebase\";\n\nvar config = {\n  apiKey: \"AIzaSyCiP5ojH9LAXyZpoGcR2vqgeikBDB7PunA\",\n  authDomain: \"guildeducation-chat.firebaseapp.com\",\n  databaseURL: \"https://guildeducation-chat.firebaseio.com\",\n  projectId: \"guildeducation-chat\",\n  storageBucket: \"guildeducation-chat.appspot.com\",\n  messagingSenderId: \"564496880232\"\n};\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import React from \"react\";\nimport { createStyledComponent } from \"mineral-ui/styles\";\nimport Flex, { FlexItem } from \"mineral-ui/Flex\";\n\nconst LeftMessage = createStyledComponent(FlexItem, {\n  background: \"#0b93f6\",\n  borderRadius: \"25px\",\n  color: \"white\",\n  lineHeight: \"24px\",\n  marginBottom: \"12px\",\n  marginRight: \"300px\",\n  marginTop: \"0.5rem\",\n  maxWidth: \"255px\",\n  padding: \"10px 20px\",\n  textAlign: \"center\",\n  width: \"50%\",\n  wordWrap: \"break-word\"\n});\n\nconst RightMessage = createStyledComponent(FlexItem, {\n  background: \"#e5e5ea\",\n  borderRadius: \"25px\",\n  color: \"black\",\n  lineHeight: \"24px\",\n  marginBottom: \"12px\",\n  marginLeft: \"300px\",\n  marginTop: \"0.5rem\",\n  maxWidth: \"255px\",\n  padding: \"10px 20px\",\n  textAlign: \"center\",\n  width: \"50%\",\n  wordWrap: \"break-word\"\n});\n\nconst Message = ({ message }) => {\n  return (\n    <Flex justifyContent={\"center\"}>\n      {message.name === \"Jane Doe\" ? (\n        <LeftMessage\n          data-testid={`message-${message.key}`}\n          key={message.key}\n        >{`${message.text}`}</LeftMessage>\n      ) : (\n        <RightMessage\n          data-testid={`message-${message.key}`}\n          key={message.key}\n        >{`${message.text}`}</RightMessage>\n      )}\n    </Flex>\n  );\n};\n\nexport default Message;\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport { ThemeProvider } from \"mineral-ui/themes\";\nimport Message from \"./Message\";\nimport \"./App.css\";\n\n/**\n * Entering messages into the message box will be saved off and\n * redistributed to any other open tabs via the firebase subscription.\n * Entering a text message will randomly assign a hard coded user.\n */\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentVal: \"\",\n      messages: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  /**\n   * componentDidMount\n   * Query for messages when the component first mounts\n   */\n  componentDidMount() {\n    this.loadMessages();\n  }\n\n  handleChange(event) {\n    this.setState({ currentVal: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if (!event.target[0].value.trim()) {\n      return;\n    }\n    this.props.saveMessage\n      ? this.props.saveMessage(event.target[0].value)\n      : this.saveMessage(event.target[0].value);\n    this.setState({ currentVal: \"\" });\n  }\n\n  /**\n   * loadMessages\n   * Registers the 2 firebase listeners: child_added and child_changed which\n   * call updateMessages when something is updated in firebase which in turn\n   * updates component state and kicks off the render cycle\n   */\n  loadMessages() {\n    const updateMessages = snapshot => {\n      const data = snapshot.val();\n      const newMessage = {\n        key: snapshot.key,\n        name: data.name,\n        text: data.text\n      };\n      const messages = this.state.messages;\n      messages.push(newMessage);\n\n      this.setState({\n        messages: messages\n      });\n    };\n\n    // listen for changes in firebase and updateState accordingly\n    firebase\n      .database()\n      .ref(\"/messages/\")\n      .limitToLast(8)\n      .on(\"child_added\", updateMessages);\n    firebase\n      .database()\n      .ref(\"/messages/\")\n      .limitToLast(8)\n      .on(\"child_changed\", updateMessages);\n  }\n\n  /**\n   * saveMessage\n   * Pushes messages from the textInput out to firebase\n   * @param messageText\n   */\n  saveMessage(messageText) {\n    const name = Math.floor(Math.random() * 2) === 0 ? \"John Doe\" : \"Jane Doe\";\n    return firebase\n      .database()\n      .ref(\"/messages/\")\n      .push({\n        name: name,\n        text: messageText\n      })\n      .catch(function(error) {\n        console.error(\"Error writing new message to firebase\", error);\n      });\n  }\n\n  render() {\n    return (\n      <ThemeProvider>\n        <div className=\"App-messages\">\n          {this.state.messages.map(message => (\n            <Message message={message} />\n          ))}\n          <form onSubmit={this.handleSubmit}>\n            <input\n              value={this.state.currentVal}\n              onChange={this.handleChange}\n              data-testid=\"input\"\n              className=\"App-messageBox\"\n            />\n            <button\n              className=\"App-messageButton\"\n              data-testid=\"inputButton\"\n              type=\"submit\"\n            >\n              ^\n            </button>\n          </form>\n        </div>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}